// * ———————————————————————————————————————————————————————— * //
// * 	enduro render
// *	renders individual page based on source template, context and culture
// * ———————————————————————————————————————————————————————— * //
const page_queue_generator = function () {}

// * vendor dependencies
const glob = require('glob-promise')
const path = require('path')

// * enduro dependencies
const flat = require(enduro.enduro_path + '/libs/flat_db/flat')
const rerouting = require('./rerouting')

// Renders individual files
page_queue_generator.prototype.generate_pagelist = function () {
	return this.get_all_pages().then((files) => {
		// reduce all page files to single array
		return files.reduce((pages, file) => {
			// by concatenating all cultures for each page into the final array
			return pages.concat(
				// map each culture page to a page object
				enduro.config.cultures.map((culture) => {
					let context_file = this.get_page_url_from_full_path(file)

					return {
						file: file, // absolute path to page template file
						culture: culture, // culture string
						context_file: context_file, // relative, 'flat' path to cms file
						destination_path: flat.filepath_from_filename(context_file),
						generator: flat.is_generator(context_file) // true if page is generator
					}
				})
			)
		}, [])
	}).then((pages_and_generators) => {
		let generator_promises = []

		let pages_without_generators = pages_and_generators.reduce((pages, page) => {
			if (page.generator) { // if generator context
				// collect promises to get generated pages into `generator_promises`
				generator_promises.push(this.get_generated_pages(page))
				// continue to next page (without adding the generator to the result)
				return pages
			} // else just add the page to the result
			return [...pages, page]
		}, [])

		// get generated pages for all generators
		return Promise.all(generator_promises).then((generated_pages_by_generator) => {
			return pages_without_generators.concat(...generated_pages_by_generator)
		})
	}).then((pages) => {
		// reroute paths for all pages
		return rerouting.reroute_paths(pages)
	})
}

// generate list of pages that needs to be generated by generator
page_queue_generator.prototype.get_generated_pages = function (page_context) {
	// fetch all context files from folder of the same name as the template name
	let pages_glob = path.join(enduro.project_path, 'cms', page_context.context_file, '**/*.js')

	return glob(pages_glob).then((files) => {
		// remove generator template file
		const template_filename = page_context.context_file.replace(/(\/.+)$/, '$1$1.js')

		// map found context files
		return files
			.filter(file => !file.endsWith(template_filename))
			.map((file) => {
				let context_file = flat.get_cms_filename_from_fullpath(file)

				// update clone of generator object
				return Object.assign({}, page_context, {
					context_file: context_file, // relative, 'flat' path to cms file
					destination_path: flat.filepath_from_filename(context_file),
				})
			})
	})
}

page_queue_generator.prototype.get_all_pages = function () {
	return glob(enduro.project_path + '/pages/**/*.hbs')
}

page_queue_generator.prototype.get_page_url_from_full_path = function (full_path) {
	return full_path.match(/pages\/(.*)\.([^\\/]+)$/)[1]
}

module.exports = new page_queue_generator()
